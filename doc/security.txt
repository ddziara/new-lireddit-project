https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html

[Custom Headers and CORS]

Cookies are not set on cross-origin requests (CORS) by default. To enable cookies on an API, 
you will set Access-Control-Allow-Credentials=true. The browser will reject any response that 
includes Access-Control-Allow-Origin=* if credentials are allowed. To allow CORS requests, 
but protect against CSRF, you need to make sure the server only whitelists a few select origins 
that you definitively control via the Access-Control-Allow-Origin header. Any cross-origin 
request from an allowed domain will be able to set custom headers.

As an example, you might configure your backend to allow CORS with cookies from 
http://www.yoursite.com and http://mobile.yoursite.com, so that the only possible preflight 
responses are:

  Access-Control-Allow-Origin=http://mobile.yoursite.com
  Access-Control-Allow-Credentials=true

or 

  Access-Control-Allow-Origin=http://www.yoursite.com
  Access-Control-Allow-Credentials=true

A less secure configuration would be to configure your backend server to allow CORS from all 
subdomains of your site using a regular expression. If an attacker is able to take over 
a subdomain (not uncommon with cloud services) your CORS configuration would allow them 
to bypass the same origin policy and forge a request with your custom header.  

[[Defense In Depth Techniques]]

[SameSite Cookie Attribute]

SameSite is a cookie attribute (similar to HTTPOnly, Secure etc.) which aims to mitigate 
CSRF attacks. It is defined in RFC6265bis. This attribute helps the browser decide whether 
to send cookies along with cross-site requests. Possible values for this attribute are Lax, 
Strict, or None.

The Strict value will prevent the cookie from being sent by the browser to the target site 
in all cross-site browsing context, even when following a regular link. For example, 
for a GitHub-like website this would mean that if a logged-in user follows a link to 
a private GitHub project posted on a corporate discussion forum or email, GitHub will 
not receive the session cookie and the user will not be able to access the project. 
A bank website however doesn't want to allow any transactional pages to be linked from 
external sites, so the Strict flag would be most appropriate.

The default Lax value provides a reasonable balance between security and usability for 
websites that want to maintain user's logged-in session after the user arrives from 
an external link. In the above GitHub scenario, the session cookie would be allowed when 
following a regular link from an external website while blocking it in CSRF-prone request 
methods such as POST. Only cross-site-requests that are allowed in Lax mode are the ones 
that have top-level navigations and are also safe HTTP methods.

For more details on the SameSite values, check the following section from the rfc.

Example of cookies using this attribute:

  Set-Cookie: JSESSIONID=xxxxx; SameSite=Strict
  Set-Cookie: JSESSIONID=xxxxx; SameSite=Lax

All desktop browsers and almost all mobile browsers now support the SameSite attribute. 
To keep track of the browsers implementing it and the usage of the attribute, refer to 
the following service. Note that Chrome has announced that they will mark cookies as 
SameSite=Lax by default from Chrome 80 (due in February 2020), and Firefox and Edge are 
both planning to follow suit. Additionally, the Secure flag will be required for cookies 
that are marked as SameSite=None.  

It is important to note that this attribute should be implemented as an additional layer 
defense in depth concept. This attribute protects the user through the browsers supporting
it, and it contains as well 2 ways to bypass it as mentioned in the following section. 
This attribute should not replace having a CSRF Token. Instead, it should co-exist with 
that token in order to protect the user in a more robust way.

